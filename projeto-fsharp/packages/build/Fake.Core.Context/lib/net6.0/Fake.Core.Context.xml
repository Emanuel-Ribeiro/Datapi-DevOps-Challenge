<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fake.Core.Context</name></assembly>
<members>
<member name="T:Fake.Core.Context.RuntimeContext">
<summary>
 FAKE runtime execution context
</summary>
</member>
<member name="P:Fake.Core.Context.FakeExecutionContext.Arguments">
<summary>
 Script arguments
</summary>
</member>
<member name="P:Fake.Core.Context.FakeExecutionContext.ScriptFile">
<summary>
 The script file current build is running
</summary>
</member>
<member name="P:Fake.Core.Context.FakeExecutionContext.Context">
<summary>
 The context data
</summary>
</member>
<member name="P:Fake.Core.Context.FakeExecutionContext.IsCached">
<summary>
 Mark if script is cached
</summary>
</member>
<member name="T:Fake.Core.Context.FakeExecutionContext">
 <summary>
 FAKE execution context type
 </summary>
</member>
<member name="M:Fake.Core.Context.forceFakeContext">
 <summary>
 Check and current context is a FAKE execution context and throws `InvalidOperationException`
 exception when not
 </summary>
</member>
<member name="M:Fake.Core.Context.isFakeContext">
 <summary>
 Check if execution context is a FAKE execution context
 </summary>
</member>
<member name="M:Fake.Core.Context.setFakeContext(System.String,System.Object,Microsoft.FSharp.Core.FSharpFunc{System.Object,System.Object},Fake.Core.Context.FakeExecutionContext)">
 <summary>
 Set or update FAKE execution context data by name
 </summary>

 <param name="name">FAKE execution context data name</param>
 <param name="updateF">Callback to call when updating the value</param>
 <param name="f">FAKE execution context</param>
</member>
<member name="M:Fake.Core.Context.removeFakeContext(System.String,Fake.Core.Context.FakeExecutionContext)">
 <summary>
 Removes FAKE execution context data by name
 </summary>

 <param name="name">FAKE execution context data name</param>
 <param name="f">FAKE execution context</param>
</member>
<member name="M:Fake.Core.Context.getFakeContext(System.String,Fake.Core.Context.FakeExecutionContext)">
 <summary>
 Gets FAKE execution context data by name
 </summary>

 <param name="name">FAKE execution context data name</param>
 <param name="f">FAKE execution context</param>
</member>
<member name="M:Fake.Core.Context.getFakeExecutionContext(Fake.Core.Context.RuntimeContext)">
 <summary>
 Gets FAKE execution context by FAKE runtime context
 </summary>

 <param name="e">FAKE runtime execution context</param>
</member>
<member name="M:Fake.Core.Context.removeExecutionContext">
 <summary>
 Remove execution context
 </summary>
</member>
<member name="M:Fake.Core.Context.setExecutionContext(Fake.Core.Context.RuntimeContext)">
 <summary>
 Sets FAKE execution context to the given context
 </summary>
</member>
<member name="M:Fake.Core.Context.getExecutionContext">
 <summary>
 Gets FAKE execution context
 </summary>
</member>
<member name="T:Fake.Core.Context">
 <summary>
 This module tracks the context of the build.
 <remarks>
 This allows us to run some modules without any context and change behavior depending on the context
 (For example <c>Fake.Process</c> kills all processes when the Fake Context exists, but it should not when used
 as library)
 </remarks>
 </summary>
</member>
</members>
</doc>
