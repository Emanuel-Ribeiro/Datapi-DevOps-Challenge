<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fake.DotNet.NuGet</name></assembly>
<members>
<member name="P:Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams.Verbosity">
<summary>
 The verbosity level
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams.IncludePreRelease">
<summary>
 Mark if pre-releases are included in restore process
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams.Retries">
<summary>
 Specifies how often nuget should try to restore the packages - default is 5
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams.ExcludeVersion">
<summary>
 Mark a version to be excluded, the version is specified in &lt;c&gt;Version&lt;/c&gt; property
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams.Version">
<summary>
 The version to use in restoring the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams.OutputPath">
<summary>
 Specifies the folder in which packages are installed. Output Directory
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams.TimeOut">
<summary>
 The timeout to use to restrict command execution time
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams.Sources">
<summary>
 Specifies the list of package sources (as URLs) to use for the restore
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams.ToolPath">
<summary>
 The path to the NuGet program
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams">
 <summary>
 RestorePackages parameter path for single packages
 </summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestorePackageParams.Verbosity">
<summary>
 The verbosity level
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestorePackageParams.OutputPath">
<summary>
 Specifies the folder in which packages are installed. Output Directory
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestorePackageParams.Retries">
<summary>
 Specifies how often nuget should try to restore the packages - default is 5
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestorePackageParams.TimeOut">
<summary>
 The timeout to use to restrict command execution time
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestorePackageParams.Sources">
<summary>
 Specifies the list of package sources (as URLs) to use for the restore
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestorePackageParams.ToolPath">
<summary>
 The path to the NuGet program
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Restore.RestorePackageParams">
 <summary>
 RestorePackages parameter path
 </summary>
</member>
<member name="T:Fake.DotNet.NuGet.Restore.NugetRestoreVerbosity.Detailed">
<summary>
 Verbose/detailed verbosity level
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Restore.NugetRestoreVerbosity.Quiet">
<summary>
 Quiet verbosity level, the default value
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Restore.NugetRestoreVerbosity.Normal">
<summary>
 Normal verbosity level
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Restore.NugetRestoreVerbosity">
<summary>
 RestorePackages Verbosity settings
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.Restore.RestoreMSSolutionPackages(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.Restore.RestorePackageParams,Fake.DotNet.NuGet.Restore.RestorePackageParams},System.String)">
 <summary>
 Restores the packages in the given solution file file from NuGet.
 </summary>

 <param name="setParams">Function used to manipulate the default NuGet parameters.</param>
 <param name="solutionFile">The microsoft sln file name.</param>

 <example>
 <code lang="fsharp">
 Target "RestorePackages" (fun _ ->
          "./src/Everything.sln"
          |> RestoreMSSolutionPackages (fun p ->
              { p with
                  Sources = "http://myNugetSources.com" :: p.Sources
                  OutputPath = outputDir
                  Retries = 4 })
      )
 </code>
 </example>
</member>
<member name="M:Fake.DotNet.NuGet.Restore.RestorePackages">
 <summary>
 Restores all packages from NuGet to the default directories by scanning for packages.config files
 in any subdirectory.
 </summary>
</member>
<member name="M:Fake.DotNet.NuGet.Restore.RestorePackage(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.Restore.RestorePackageParams,Fake.DotNet.NuGet.Restore.RestorePackageParams},System.String)">
 <summary>
 Restores the packages in the given packages.config file from NuGet.
 </summary>

 <param name="setParams">Function used to manipulate the default NuGet parameters.</param>
 <param name="packageFile">The packages.config file name.</param>

 <example>
 <code lang="fsharp">
 Target "RestorePackages" (fun _ ->
          "./src/ProjectA/packages.config"
          |> RestorePackage (fun p ->
              { p with
                  Sources = "http://myNugetSources.com" :: p.Sources
                  OutputPath = outputDir
                  Retries = 4 })
      )
 </code>
 </example>
</member>
<member name="M:Fake.DotNet.NuGet.Restore.RestorePackageId(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams,Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams},System.String)">
 <summary>
 Restores the given package from NuGet
 </summary>

 <param name="setParams">Function used to manipulate the default NuGet parameters.</param>
 <param name="packageFile">The package Id to restore</param>
</member>
<member name="M:Fake.DotNet.NuGet.Restore.buildNuGetArgs(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams,Fake.DotNet.NuGet.Restore.RestoreSinglePackageParams},System.String)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.Restore.buildSources(Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.Restore.runNuGetTrial(System.Int32,System.String,System.TimeSpan,System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.Restore.runNuGet(System.String,System.TimeSpan,System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestoreSinglePackageDefaults">
<summary>
 RestoreSinglePackageParams defaults parameters
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Restore.RestorePackageDefaults">
<summary>
 RestorePackage defaults parameters
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.Restore.findNuget(System.String)">
 <summary>
 Looks for NuGet.exe in
 <list type="number">
 <item>
 the specified defaultPath
 </item>
 <item>
 a list of standard tool folders
 </item>
 <item>
 any subfolder in the current directory
 </item>
 <item>
 the PATH - returns the first path where NuGet.exe was found.
 </item>
 </list>
 </summary>

 <param name="defaultPath">The default path to return when NuGet cannot be found by path specified above</param>
</member>
<member name="T:Fake.DotNet.NuGet.Restore">
 <summary>
 Contains tasks which allow to restore NuGet packages from a NuGet package feed like
 <a href="http://www.nuget.org">nuget.org</a> using the
 <a href="https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-restore">
 nuget.exe restore command</a>. There is also a tutorial about
 <a href="/dotnet-nuget.html">nuget package restore</a> available.
 </summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetDependency.IsDevelopmentDependency">
<summary>
 Mark if the dependency is a development (dev) dependency or not
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetDependency.Version">
<summary>
 The package version
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetDependency.Id">
<summary>
 The package Id
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet.NuGetDependency">
 <summary>
 Holds data for NuGet dependencies of a package
 </summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.Title">
<summary>
 The package title
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.LicenseUrl">
<summary>
 package license URL
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.ProjectUrl">
<summary>
 The package project URL
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.Tags">
<summary>
 tags referencing the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.Owners">
<summary>
 A comma-separated list of the package creators using profile names on nuget.org.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.Authors">
<summary>
 A comma-separated list of packages authors, matching the profile names on nuget.org.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.IsLatestVersion">
<summary>
 Holds if the package is the latest version published or not
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.Summary">
<summary>
 The package summary notes
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.Description">
<summary>
 The package description
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.Version">
<summary>
 The version of the package, following the major.minor.patch pattern. Version numbers may
 include a pre-release suffix
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NugetPackageInfo.Id">
<summary>
 The case-insensitive package identifier
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet.NugetPackageInfo">
 <summary>
 NuGet package information
 </summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.Tags">
<summary>
 tags referencing the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.ReleaseNotes">
<summary>
 The release notes file of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.Language">
<summary>
 The package language
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.Description">
<summary>
 The package description
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.RequireLicenseAcceptance">
<summary>
 Mark if the package need usage acceptance before using it by license
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.ProjectUrl">
<summary>
 The package project URL
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.LicenseUrl">
<summary>
 package license URL
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.PackageHashAlgorithm">
<summary>
 The package hash algorithm used
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.PackageHash">
<summary>
 The unique hash of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.Published">
<summary>
 The published date of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.Created">
<summary>
 The creation date of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.IsLatestVersion">
<summary>
 Holds if the package is the latest version published or not
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.Url">
<summary>
 A URL for the package&apos;s home page, often shown in UI displays as well as nuget.org.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.Owners">
<summary>
 A comma-separated list of the package creators using profile names on nuget.org.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.Authors">
<summary>
 A comma-separated list of packages authors, matching the profile names on nuget.org.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.Version">
<summary>
 The version of the package, following the major.minor.patch pattern. Version numbers may
 include a pre-release suffix
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuSpecPackage.Id">
<summary>
 The case-insensitive package identifier
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet.NuSpecPackage">
 <summary>
 NuSpec metadata type Please see
 <a href="https://docs.microsoft.com/en-us/nuget/reference/nuspec">NuSpec reference</a>
 </summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetPushParams.PushTrials">
<summary>
 Number of times to retry pushing the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetPushParams.Timeout">
<summary>
 Specifies the timeout for pushing to a server.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetPushParams.SymbolSource">
<summary>
 Specifies the symbol server URL.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetPushParams.SymbolApiKey">
<summary>
 The API key for the symbol server.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetPushParams.Source">
<summary>
 Specifies the server URL. This option is required unless DefaultPushSource config value is set in
 the NuGet config file.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetPushParams.NoServiceEndpoint">
<summary>
 Doesn&apos;t append &quot;api/v2/package&quot; to the source URL.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetPushParams.NoSymbols">
<summary>
 Doesn&apos;t push symbols (even if present).
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetPushParams.ApiKey">
<summary>
 The API key for the server
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetPushParams.DisableBuffering">
<summary>
 Disables buffering when pushing to an HTTP(S) server to reduce memory usage.
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet.NuGetPushParams">
 <summary>
 dotnet nuget push command options
 </summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet.BreakingPoint.Patch">
<summary>
 Breaking on patch component of SemVer
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet.BreakingPoint.Minor">
<summary>
 Breaking on minor component of SemVer
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet.BreakingPoint.SemVer">
<summary>
 Breaking on major component of SemVer
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet.BreakingPoint">
<summary>
 NuGet package versioning breaking changes point
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Language">
<summary>
 The package language. &lt;c&gt;language&lt;/c&gt;
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.ContentFiles">
<summary>
 The list of content files to include or exclude. &lt;c&gt;contentFiles&lt;/c&gt;
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Files">
<summary>
 The list of files to include or exclude. &lt;c&gt;files&lt;/c&gt;
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Properties">
<summary>
 Should appear last on the command line after other options. Specifies a list of properties
 that override values in the project file
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.SymbolPackage">
<summary>
 `NugetSymbolPackage` parameters
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Publish">
<summary>
 mark if to publish the package or not
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.PublishTrials">
<summary>
 mark if to publish a trial version of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.IncludeReferencedProjects">
<summary>
 Mark if to include list of projects that reference the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.FrameworkAssemblies">
<summary>
 The list of &lt;c&gt;frameworkAssemblies&lt;/c&gt;
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.ReferencesByFramework">
<summary>
 The list of packages that reference the package grouped by Framework. &lt;c&gt;references&lt;/c&gt;
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.References">
<summary>
 The list of packages that reference the package. &lt;c&gt;references&lt;/c&gt;
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.DependenciesByFramework">
<summary>
 The list of dependencies of the package grouped by Framework. &lt;c&gt;dependencies&lt;/c&gt;
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Dependencies">
<summary>
 The list of dependencies of the package. &lt;c&gt;dependencies&lt;/c&gt;
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.ProjectFile">
<summary>
 The project file to use
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.NoPackageAnalysis">
<summary>
 Specifies that pack should not run package analysis after building the package.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.NoDefaultExcludes">
<summary>
 Prevents default exclusion of NuGet package files and files and folders starting with a dot,
 such as &lt;c&gt;.svn&lt;/c&gt; and &lt;c&gt;.gitignore&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.SymbolAccessKey">
<summary>
 NuGet symbol API access key
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.SymbolPublishUrl">
<summary>
 Specifies the symbol server URL.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.AccessKey">
<summary>
 NuGet API access key
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.PublishUrl">
<summary>
 Specifies the server URL. NuGet identifies a UNC or local folder source and simply
 copies the file there instead of pushing it using HTTP
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.OutputPath">
<summary>
 Specifies the folder in which the created package is stored. If no folder is specified,
 the current folder is used.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.BasePath">
<summary>
 Sets the base path of the files defined in the .nuspec file.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.WorkingDir">
<summary>
 The working directory to execute command in
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Copyright">
<summary>
 The copyright text of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.ReleaseNotes">
<summary>
 The release notes file path of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Tags">
<summary>
 Tags referring to the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Description">
<summary>
 The descriptive text of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Summary">
<summary>
 The summary description of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Title">
<summary>
 The package title
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Project">
<summary>
 The project name of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Authors">
<summary>
 The list of authors of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.Version">
<summary>
 The package version
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.TimeOut">
<summary>
 The timeout to use to restrict NuGet command run time
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.NuGetParams.ToolPath">
<summary>
 The path to the NuGet executable
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet.NuGetParams">
 <summary>
 Nuget base parameter type
 </summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.ToolOptions.IsFullFramework">
<summary>
 Mark if to use full framework or not
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.ToolOptions.WorkingDir">
<summary>
 The working directory to execute the command in
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.ToolOptions.Command">
<summary>
 The NuGet command to execute
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.ToolOptions.ToolPath">
<summary>
 The NuGet executable path
</summary>
</member>
<member name="F:Fake.DotNet.NuGet.NuGet.NugetSymbolPackage.Nuspec">
<summary>
 Build a symbol package using the nuspec file
</summary>
</member>
<member name="F:Fake.DotNet.NuGet.NuGet.NugetSymbolPackage.ProjectFile">
<summary>
 Build a symbol package using a project file, if provided
</summary>
</member>
<member name="F:Fake.DotNet.NuGet.NuGet.NugetSymbolPackage.None">
<summary>
 Do not build symbol packages
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet.NugetSymbolPackage">
<summary>
 Specifies that the package contains sources and symbols.
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.getDependencies(System.String)">
 <summary>
 Returns the dependencies from specified packages.config file
 </summary>

 <param name="packagesFile">The packages file to use</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.argList(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.downloadPackage(System.String,Fake.DotNet.NuGet.NuGet.NuSpecPackage)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.searchByTitle(System.String,System.String)">
 <summary>
 Search NuGet query endpoint for packages matching given name by title
 </summary>

 <param name="repoUrl">Query endpoint of NuGet search service</param>
 <param name="packageName">The package to search for</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.getLatestPackage(System.String,System.String)">
 <summary>
 Gets the latest published package from NuGet feed by package id.
 </summary>

 <param name="repoUrl">Query endpoint of NuGet search service</param>
 <param name="packageName">The package to get</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.getPackage(System.String,System.String,System.String)">
 <summary>
 Gets a Package information from NuGet feed by package id.
 </summary>

 <param name="repoUrl">Query endpoint of NuGet search service</param>
 <param name="packageName">The package to get</param>
 <param name="version">The specific version to get</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.extractFeedPackageFromJson(Newtonsoft.Json.Linq.JObject,System.Boolean)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.getRepoUrl">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.discoverRepoUrl">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.NuGet.galleryV3">
<summary>
 Default NuGet feed. Using V3 feed: &lt;c&gt;https://api.nuget.org/v3/index.json&lt;/c&gt;
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.getNuspecProperties(System.String)">
 <summary>
 Parses nuspec metadata from a nuspec file.
 </summary>

 <param name="nuspec">The .nuspec file content.</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.NuGet(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.NuGet.NuGetParams,Fake.DotNet.NuGet.NuGet.NuGetParams},System.String)">
 <summary>
 Creates a new NuGet package, and optionally publishes it.
 Template parameter substitution is performed when passing a .nuspec
 </summary>

 <param name="setParams">Function used to manipulate the default NuGet parameters.</param>
 <param name="nuspecOrProjectFile">The .nuspec file name.</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.NuGetPublish(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.NuGet.NuGetParams,Fake.DotNet.NuGet.NuGet.NuGetParams})">
 <summary>
 Publishes a NuGet package to the nuget server.
 </summary>

 <param name="setParams">Function used to manipulate the default NuGet parameters.</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.NuGetPack(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.NuGet.NuGetParams,Fake.DotNet.NuGet.NuGet.NuGetParams},System.String)">
 <summary>
 Creates a new NuGet package based on the given .nuspec or project file.
 Template parameter substitution is performed when passing a .nuspec
 </summary>

 <param name="setParams">Function used to manipulate the default NuGet parameters.</param>
 <param name="nuspecOrProjectFile">The .nuspec or project file name.</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.NuGetPackDirectly(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.NuGet.NuGetParams,Fake.DotNet.NuGet.NuGet.NuGetParams},System.String)">
 <summary>
 Creates a new NuGet package based on the given .nuspec or project file.
 The .nuspec / projectfile is passed as-is (no templating is performed)
 </summary>

 <param name="setParams">Function used to manipulate the default NuGet parameters.</param>
 <param name="nuspecOrProjectFile">The .nuspec or project file name.</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.publishSymbols(Fake.DotNet.NuGet.NuGet.NuGetParams)">
<summary>
 push package to symbol server (and try again if something fails)
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.pack(Fake.DotNet.NuGet.NuGet.NuGetParams,System.String)">
<summary>
 Creates a NuGet package without templating (including symbols package if enabled)
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.GetPackageVersion(System.String,System.String)">
 <summary>
 Gets the version no. for a given package in the deployments folder
 </summary>

 <param name="deploymentsDir">The deployment directory to look into</param>
 <param name="package">The package id to look for</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.RequireRange(Fake.DotNet.NuGet.NuGet.BreakingPoint,System.String)">
 <summary>
 Require a version by given breaking point and version
 See <a href="https://docs.nuget.org/create/versioning">NuGet Versioning</a>
 </summary>

 <param name="breakingPoint">The breaking point for version range. See <c>BreakingPoint</c> type</param>
 <param name="version">The version to use to find the range</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.RequireExactly(System.String)">
 <summary>
 Creates a string which tells NuGet that you require exactly this package version.
 </summary>

 <param name="version">The exact version to require</param>
</member>
<member name="M:Fake.DotNet.NuGet.NuGet.NuGetDefaults">
<summary>
 NuGet default parameters
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.NuGet">
 <summary>
 Contains helper functions and task which allow to inspect, create and publish
 <a href="https://www.nuget.org/">NuGet</a> packages.
 There is also a tutorial about <a href="/dotnet-nuget.html">nuget package creating</a> available.
 </summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.ConfigFile">
<summary>
 NuGet configuration file. Default &lt;c&gt;None&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.NonInteractive">
<summary>
 Do not prompt for user input or confirmations. Default &lt;c&gt;true&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.Prerelease">
<summary>
 Allows updating to prerelease versions. Default &lt;c&gt;false&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.Verbose">
<summary>
 Show verbose output while updating. Default &lt;c&gt;false&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.Safe">
<summary>
 Looks for updates with the highest version available within the same major and minor version as
 the installed package. Default &lt;c&gt;false&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.RepositoryPath">
<summary>
 Folder to store packages in. Default &lt;c&gt;./packages&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.Version">
<summary>
 Version to update to. Default &lt;c&gt;None&lt;/c&gt;. Used to upgrade/downgrade to a explicit version of a package.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.Ids">
<summary>
 Packages to update. Update all if empty.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.Sources">
<summary>
 Nuget feeds to search updates in. Use default if empty.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.Retries">
<summary>
 Number of retries if update fails.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.TimeOut">
<summary>
 Timeout for the update.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateParams.ToolPath">
<summary>
 Path to the nuget.exe.
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Update.NugetUpdateParams">
 <summary>
 Nuget update parameters.
 </summary>
</member>
<member name="M:Fake.DotNet.NuGet.Update.NugetUpdate(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.Update.NugetUpdateParams,Fake.DotNet.NuGet.Update.NugetUpdateParams},System.String)">
 <summary>
 Update packages specified in the package file.
 </summary>
 <remarks>
 Fails if packages are not installed; see <a href="https://nuget.codeplex.com/workitem/3874">nuget bug</a>.
 Fails if packages file has no corresponding VS project; see
 <a href="https://nuget.codeplex.com/workitem/3875">nuget bug</a>.
 </remarks>

 <param name="setParams">Function used to manipulate the default parameters.</param>
 <param name="packagesFile">Path to the <c>*.sln</c>, <c>*.*proj</c> or <c>packages.config</c> file.</param>
</member>
<member name="M:Fake.DotNet.NuGet.Update.buildArgs(Fake.DotNet.NuGet.Update.NugetUpdateParams)">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Update.NugetUpdateDefaults">
<summary>
 Parameter default values.
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Update">
 <summary>
 Contains tasks for updating NuGet packages including assembly hint paths in the project files using
 the <a href="https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-update">nuget.exe update command</a>.
 </summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.ConfigFile">
<summary>
 NuGet configuration file. Default &lt;c&gt;None&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.NoCache">
<summary>
 Disable looking up packages from local machine cache. Default &lt;c&gt;false&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.NonInteractive">
<summary>
 Do not prompt for user input or confirmations. Default &lt;c&gt;true&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.Verbosity">
<summary>
 Display this amount of details in the output: normal, quiet, detailed. Default &lt;c&gt;normal&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.OutputDirectory">
<summary>
 Specifies the directory in which packages will be installed. Default  &lt;c&gt;./packages/&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.Prerelease">
<summary>
 Allows updating to prerelease versions. Default &lt;c&gt;false&lt;/c&gt;.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.ExcludeVersion">
<summary>
 If set, the destination directory will contain only the package name, not the version number.
 Default `false`.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.Version">
<summary>
 The version of the package to install.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.Sources">
<summary>
 Nuget feeds to search updates in. Use default if empty.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.Retries">
<summary>
 Number of retries if update fails.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.TimeOut">
<summary>
 Timeout for the update.
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallParams.ToolPath">
<summary>
 Path to the nuget.exe.
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Install.NugetInstallParams">
 <summary>
 Nuget install parameters.
 </summary>
</member>
<member name="T:Fake.DotNet.NuGet.Install.NugetInstallVerbosity.Detailed">
<summary>
 Verbose/detailed verbosity level
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Install.NugetInstallVerbosity.Quiet">
<summary>
 Quiet verbosity level, the default value
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Install.NugetInstallVerbosity.Normal">
<summary>
 Normal verbosity level
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Install.NugetInstallVerbosity">
<summary>
 Nuget install verbosity mode.
 RestorePackages Verbosity settings
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.Install.NugetInstall(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.Install.NugetInstallParams,Fake.DotNet.NuGet.Install.NugetInstallParams},System.String)">
 <summary>
 Installs the given package.
 </summary>

 <param name="setParams">Function used to manipulate the default parameters.</param>
 <param name="packagesFile">Path to the <c>*.sln</c>, <c>*.*proj</c> or <c>packages.config</c> file,
 or simply a NuGet package name</param>
</member>
<member name="M:Fake.DotNet.NuGet.Install.buildArgs(Fake.DotNet.NuGet.Install.NugetInstallParams)">
<summary>
 [omit]
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.Install.argList(System.String,System.Collections.Generic.IEnumerable{System.String})">
<summary>
 [omit]
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Install.NugetInstallDefaults">
<summary>
 Parameter default values.
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Install">
 <namespacedoc>
 <summary>
 DotNet.NuGet namespace contains tasks to interact with NuGet registry and packages
 </summary>
 </namespacedoc>

 <summary>
 Contains tasks for installing NuGet packages using the
 <a href="https://docs.microsoft.com/en-us/nuget/reference/cli-reference/cli-ref-install">
 nuget.exe install command</a>.
 </summary>
</member>
<member name="P:Fake.DotNet.NuGet.Version.NuGetVersionArg.DefaultVersion">
<summary>
 The original/default version before increment
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Version.NuGetVersionArg.Increment">
<summary>
 The next version of the package after increment
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Version.NuGetVersionArg.PackageName">
<summary>
 The package name
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Version.NuGetVersionArg.Server">
<summary>
 The NuGet server
</summary>
</member>
<member name="M:Fake.DotNet.NuGet.Version.NuGetVersionArg.Default">
<summary>
 Default arguments to compute next NuGet version number
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Version.NuGetVersionArg">
 <summary>
 Arguments for the next NuGet version number computing
 </summary>
</member>
<member name="T:Fake.DotNet.NuGet.Version.NuGetVersionIncrement">
<summary>
 NuGet version incrementer
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Version.NuGetSearchResponse">
<summary>
 The response type of NuGet search
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Version.NuGetSearchResult">
<summary>
 Holds list of results of a NuGet search
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Version.NuGetSearchItemResult.Published">
<summary>
 The published date of the package
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Version.NuGetSearchItemResult.Version">
<summary>
 The package version
</summary>
</member>
<member name="P:Fake.DotNet.NuGet.Version.NuGetSearchItemResult.Id">
<summary>
 The package Id
</summary>
</member>
<member name="T:Fake.DotNet.NuGet.Version.NuGetSearchItemResult">
 <summary>
 Holds data for search result of a NuGet package
 </summary>
</member>
<member name="M:Fake.DotNet.NuGet.Version.nextVersion(Microsoft.FSharp.Core.FSharpFunc{Fake.DotNet.NuGet.Version.NuGetVersionArg,Fake.DotNet.NuGet.Version.NuGetVersionArg})">
 <summary>
 Compute next NuGet version number
 </summary>

 <param name="f">Function to override Nuget version parameters</param>
</member>
<member name="M:Fake.DotNet.NuGet.Version.getLastNuGetVersion(System.String,System.String)">
 <summary>
 Retrieve current NuGet version number
 </summary>

 <param name="server">NuGet server</param>
 <param name="packageName">NuGet package name</param>
</member>
<member name="M:Fake.DotNet.NuGet.Version.IncMajor(Fake.Core.SemVerInfo)">
 <summary>
 Increment major version
 </summary>

 <param name="v">The SemVer version to increment its major component</param>
</member>
<member name="M:Fake.DotNet.NuGet.Version.IncMinor(Fake.Core.SemVerInfo)">
 <summary>
 Increment minor version
 </summary>

 <param name="v">The SemVer version to increment its minor component</param>
</member>
<member name="M:Fake.DotNet.NuGet.Version.IncPatch(Fake.Core.SemVerInfo)">
 <summary>
 Increment patch version
 </summary>

 <param name="v">The SemVer version to increment its patch component</param>
</member>
<member name="T:Fake.DotNet.NuGet.Version">
 <summary>
 Contains types and tasks to interact with NuGet versions
 </summary>
</member>
</members>
</doc>
