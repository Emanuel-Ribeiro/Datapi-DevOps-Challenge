<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fake.Core.Target</name></assembly>
<members>
<member name="T:Fake.Core.BuildFailedException">
 <summary>
 Exception for request errors
 </summary>
</member>
<member name="T:Fake.Core.Target">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.Core.TargetDescription">
<summary>
 [omit]
</summary>
</member>
<member name="T:Fake.Core.TargetModule.OptionalTargetContext">
 <summary>
 Optional <c>TargetContext</c>
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.runOrList">
 <summary>
 Runs the target given by the target parameter or lists the available targets
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.runOrDefaultWithArguments(System.String)">
 <summary>
 Runs the command given on the command line or the given target when no target is given
 </summary>

 <param name="targetName">The default target name</param>
</member>
<member name="M:Fake.Core.TargetModule.runOrDefault(System.String)">
 <summary>
 Runs the command given on the command line or the given target when no target is given
 </summary>

 <param name="targetName">The default target name</param>
</member>
<member name="M:Fake.Core.TargetModule.run(System.Int32,System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 Runs a target and its dependencies
 </summary>

 <param name="targetName">The target name</param>
 <param name="args">The arguments list</param>
</member>
<member name="M:Fake.Core.TargetModule.getArguments">
 <summary>
 Allows to retrieve the arguments passed into the current execution,
 when <c>Target.run*withArguments</c> overloads are used, see
 <a href="guide/core-targets.html#Targets-with-arguments">Targets with arguments</a>
 </summary>
 <remarks>
 This function should be used at the start of your fake script
 Alternatively, you can use <c>Target.initEnvironment()</c> instead,
 Note: This function usually returns <c>Some [||]</c>, it will return <c>None</c> when
 No actual execution was requested (for example because of <c>--list</c>),
 you shouldn't execute any side effects when <c>None</c> is returned
 (you should never execute side effects but you can use this flag to check if needed)
 </remarks>
</member>
<member name="M:Fake.Core.TargetModule.initEnvironment">
 <summary>
 Allows to initialize the environment before defining targets
 </summary>
 <remarks>
 This function should be used at the start of your fake script
 see <a href="https://github.com/fsharp/FAKE/issues/2283">issues #2283</a>
 Alternatively, you can use <c>Target.getArguments()</c> instead
 </remarks>
</member>
<member name="M:Fake.Core.TargetModule.initAndProcess``1(Microsoft.FSharp.Core.FSharpFunc{Fake.Core.TargetModule.ArgResults,``0})">
 <summary>
 Allows to initialize FAKE, see initEnvironment and getArguments
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.raiseIfError(Fake.Core.TargetModule.OptionalTargetContext)">
 <summary>
 If `TargetContext option` is Some and has error, raise it as a BuildFailedException
 </summary>

 <param name="context">The target context</param>
</member>
<member name="M:Fake.Core.TargetModule.updateBuildStatus(Fake.Core.TargetModule.OptionalTargetContext)">
 <summary>
 Updates build status based on <c>OptionalTargetContext</c>
 Will not update status if <c>OptionalTargetContext</c> is <c>MaybeSet</c> with value <c>None</c>
 </summary>

 <param name="context">The target context</param>
</member>
<member name="M:Fake.Core.TargetModule.deactivateFinal(System.String)">
 <summary>
 Deactivates the final target.
 </summary>

 <param name="name">The target name</param>
</member>
<member name="M:Fake.Core.TargetModule.activateFinal(System.String)">
 <summary>
 Activates the final target.
 </summary>

 <param name="name">The target name</param>
</member>
<member name="M:Fake.Core.TargetModule.createFinal(System.String,Microsoft.FSharp.Core.FSharpFunc{Fake.Core.TargetParameter,Microsoft.FSharp.Core.Unit})">
 <summary>
 Creates a final target (not activated).
 </summary>

 <param name="name">The target name</param>
 <param name="body">The target body</param>
</member>
<member name="M:Fake.Core.TargetModule.deactivateBuildFailure(System.String)">
 <summary>
 Deactivates the build failure target.
 </summary>

 <param name="name">The target name</param>
</member>
<member name="M:Fake.Core.TargetModule.activateBuildFailure(System.String)">
 <summary>
 Activates the build failure target.
 </summary>

 <param name="name">The target name</param>
</member>
<member name="M:Fake.Core.TargetModule.createBuildFailure(System.String,Microsoft.FSharp.Core.FSharpFunc{Fake.Core.TargetParameter,Microsoft.FSharp.Core.Unit})">
 <summary>
 Creates a target in case of build failure (not activated).
 </summary>

 <param name="name">The target name</param>
 <param name="body">The target body</param>
</member>
<member name="M:Fake.Core.TargetModule.runInternal(System.Boolean,System.Int32,System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 Runs a target and its dependencies.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.runSingleTarget(Fake.Core.Target,Fake.Core.TargetContext)">
 <summary>
 Runs a single target without its dependencies... only when no error has been detected yet.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.determineBuildOrder(System.String)">
 <summary>
 Determines a parallel build order for the given set of targets
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.writeTaskTimeSummary``1(``0,Fake.Core.TargetContext)">
 <summary>
 Writes a build time report.
 </summary>

 <param name="total">The total runtime.</param>
</member>
<member name="M:Fake.Core.TargetModule.printDependencyGraph(System.Boolean,System.String)">
 <summary>
 Writes a dependency graph.
 </summary>

 <param name="verbose">Whether to print verbose output or not.</param>
 <param name="target">The target for which the dependencies should be printed.</param>
</member>
<member name="M:Fake.Core.TargetModule.visitDependencies(System.Boolean,Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Fake.Core.Target,Fake.Core.TargetModule.DependencyType,System.Int32},Microsoft.FSharp.Core.Unit},System.String)">
 <summary>
 Helper function for visiting targets in a dependency tree. Returns a set containing the names of the all the
 visited targets, and a list containing the targets visited ordered such that dependencies of a target appear
 earlier in the list than the target.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.withDependencyType``1(Fake.Core.TargetModule.DependencyType,Microsoft.FSharp.Collections.FSharpList{``0})">
<summary>
 Maps the specified dependency type into the list of targets
 &lt;/summary&gt;
</summary>
</member>
<member name="M:Fake.Core.TargetModule.writeInfoFile(System.String)">
 <summary>
 List all targets available.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.listAvailable">
 <summary>
 List all targets available.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.runBuildFailureTargets(Fake.Core.TargetContext)">
 <summary>
 Runs all build failure targets.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.runFinalTargets(Fake.Core.TargetContext)">
 <summary>
 Runs all activated final targets (in alphabetically order).
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.create(System.String,Microsoft.FSharp.Core.FSharpFunc{Fake.Core.TargetParameter,Microsoft.FSharp.Core.Unit})">
 <summary>
 Creates a Target.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.addTargetWithDependencies(Microsoft.FSharp.Collections.FSharpList{Fake.Core.Dependency},Microsoft.FSharp.Core.FSharpFunc{Fake.Core.TargetParameter,Microsoft.FSharp.Core.Unit},System.String)">
 <summary>
 Add a target with dependencies
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.addTarget(Fake.Core.InternalTarget,System.String)">
 <summary>
 Creates a target from template.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.op_LessEqualsEquals(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 Backwards dependencies operator - x is dependent on ys.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.SoftDependencies(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 Adds the dependencies to the list of soft dependencies.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.Dependencies(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 Adds the dependencies to the list of dependencies.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.softDependency(System.String,System.String)">
 <summary>
 Adds the dependency to the list of soft dependencies.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.dependency(System.String,System.String)">
 <summary>
 Adds the dependency to the list of dependencies.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.softDependencyAtFront(System.String,System.String)">
 <summary>
 Appends the dependency to the list of soft dependencies.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.dependencyAtFront(System.String,System.String)">
 <summary>
 Adds the dependency to the front of the list of dependencies.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.checkIfSoftDependencyCanBeAdded(System.String,System.String)">
 <summary>
 Checks whether the soft dependency can be added.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.checkIfDependencyCanBeAdded(System.String,System.String)">
 <summary>
 Checks whether the dependency can be added.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.checkIfDependencyCanBeAddedCore(Microsoft.FSharp.Core.FSharpFunc{Fake.Core.InternalTarget,Microsoft.FSharp.Collections.FSharpList{Fake.Core.Dependency}},System.String,System.String)">
 <summary>
 Checks whether the dependency (soft or normal) can be added.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.softDependencyString(Fake.Core.InternalTarget)">
 <summary>
 Returns the soft  DependencyString for the given target.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.runSimpleWithContext(System.String,Fake.Core.TargetContext)">
 <summary>
 This simply runs the function of a target without doing anything (like tracing, stop watching or
 adding it to the results at the end)
 </summary>

 <param name="name">The target name</param>
 <param name="ctx">The context object</param>
</member>
<member name="M:Fake.Core.TargetModule.runSimple(System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 This simply runs the function of a target without doing anything (like tracing, stop watching or adding
 it to the results at the end)
 </summary>

 <param name="name">The final target name</param>
 <param name="args">The target arguments</param>
</member>
<member name="M:Fake.Core.TargetModule.dependencyString(Fake.Core.Target)">
 <summary>
 Returns the DependencyString for the given target.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.getInternal(System.String)">
 <summary>
 Gets a target with the given name from the target dictionary.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.getAllTargetsNames">
 <summary>
 Returns a list with all target names.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.reset">
 <summary>
 Resets the state so that a deployment can be invoked multiple times
 </summary>
</member>
<member name="P:Fake.Core.TargetModule.getBuildFailureTargets">
 <summary>
 BuildFailureTargets - stores build failure targets and if they are activated.
 </summary>
</member>
<member name="P:Fake.Core.TargetModule.getFinalTargets">
 <summary>
 Final Targets - stores final targets and if they are activated.
 </summary>
</member>
<member name="M:Fake.Core.TargetModule.description(System.String)">
 <summary>
 Sets the Description for the next target.
 </summary>

 <param name="text">The description of the next target</param>
</member>
<member name="M:Fake.Core.TargetModule.WithContext.runOrList">
<summary>
 Runs the target given by the target parameter or lists the available targets &amp; get context
</summary>
</member>
<member name="M:Fake.Core.TargetModule.WithContext.runOrDefaultWithArguments(System.String)">
<summary>
 Runs the command given on the command line or the given target when no target is given &amp; get context
</summary>
</member>
<member name="M:Fake.Core.TargetModule.WithContext.runOrDefault(System.String)">
<summary>
 Runs the command given on the command line or the given target when no target is given &amp; get context
</summary>
</member>
<member name="M:Fake.Core.TargetModule.WithContext.run(System.Int32,System.String,Microsoft.FSharp.Collections.FSharpList{System.String})">
<summary>
 Runs a target and its dependencies and returns an &lt;c&gt;OptionalTargetContext&lt;/c&gt;
</summary>
</member>
<member name="T:Fake.Core.TargetModule.WithContext">
 <summary>
 Run functions which don't throw and return the context after all targets have been executed.
 </summary>
</member>
<member name="T:Fake.Core.TargetModule">
 <namespacedoc>
 <summary>
 Core namespace contains FAKE's core tasks, like Target, Process, BuildeServer, etc.. modules.
 </summary>
 </namespacedoc>

 <summary>
 FAKE Target module contains tasks to define and run targets.
 </summary>
</member>
<member name="M:Fake.Core.TargetOperators.op_EqualsQmarkGreater(System.String,System.String,System.Boolean)">
 <summary>
 Defines a conditional dependency - y is dependent on x if the condition is true
 </summary>
</member>
<member name="M:Fake.Core.TargetOperators.op_LessEqualsGreater(System.String,System.String)">
 <summary>
 Defines that x and y are not dependent on each other but y is dependent on all dependencies of x.
 </summary>
</member>
<member name="M:Fake.Core.TargetOperators.op_LessEqualsQmark(System.String,System.String)">
 <summary>
 Defines a soft dependency. x must run before y, if it is present, but y does not require x to be run.
 </summary>
</member>
<member name="M:Fake.Core.TargetOperators.op_QmarkEqualsGreater(System.String,System.String)">
 <summary>
 Defines a soft dependency. x must run before y, if it is present, but y does not require x to be run.
 </summary>
</member>
<member name="M:Fake.Core.TargetOperators.op_EqualsEqualsGreater(System.String,System.String)">
 <summary>
 Defines a dependency - y is dependent on x
 </summary>
</member>
<member name="M:Fake.Core.TargetOperators.addSoftDependenciesOnSameLevel(System.String,System.String)">
 <summary>
 Specifies that two targets have the same dependencies
 </summary>
</member>
<member name="M:Fake.Core.TargetOperators.addDependenciesOnSameLevel(System.String,System.String)">
 <summary>
 Specifies that two targets have the same dependencies
 </summary>
</member>
<member name="M:Fake.Core.TargetOperators.targetsAreOnSameLevel(System.String,System.String)">
 <summary>
 Specifies that two targets are on the same level of execution
 </summary>
</member>
<member name="P:Fake.Core.TargetOperators.sameLevels">
 <summary>
 Stores which targets are on the same level
 </summary>
</member>
<member name="M:Fake.Core.TargetOperators.op_DynamicAssignment``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0,``1)">
 <summary>
 Allows to use Tokens instead of strings for TargetNames
 </summary>
</member>
<member name="M:Fake.Core.TargetOperators.op_Dynamic``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
 <summary>
 Allows to use Tokens instead of strings
 </summary>
</member>
<member name="T:Fake.Core.TargetOperators">
 <summary>
 Provides functions and operators to deal with FAKE targets and target dependencies.
 </summary>
</member>
</members>
</doc>
