<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fake.Core.Trace</name></assembly>
<members>
<member name="M:Fake.Core.ConsoleTraceListener.Fake.Core.ITraceListener.Write(Fake.Core.TraceData)">
<summary>
 Writes the given message to the Console.
</summary>
</member>
<member name="T:Fake.Core.ConsoleTraceListener">
 <summary>
 Implements a TraceListener for System.Console.
 </summary>

 <param name="importantMessagesToStdErr">Defines whether to trace important messages to StdErr.</param>
 <param name="colorMap">A function which maps TracePriorities to ConsoleColors.</param>
</member>
<member name="T:Fake.Core.ITraceListener">
<summary>
 Defines a TraceListener interface
 Note: Please contribute implementations to the fake repository, as external implementations are not supported.
</summary>
</member>
<member name="T:Fake.Core.TraceData.OpenTag">
<summary>
 Happens when a tag (Task, Target, Test, ...) has started.
</summary>
</member>
<member name="T:Fake.Core.TraceData">
<summary>
 Defines Tracing information for TraceListeners
 Please consider not using a match on this type in code external to the fake repository.
</summary>
</member>
<member name="T:Fake.Core.TagStatus">
<summary>
 The types of tagging on testing supported
 Please consider not using a match on this type in code external to the fake repository.
</summary>
</member>
<member name="T:Fake.Core.TestStatus">
<summary>
 The testing statuses supported
 Please consider not using a match on this type in code external to the fake repository.
</summary>
</member>
<member name="T:Fake.Core.ImportData">
<summary>
 The types of data to import in build process
 Please consider not using a match on this type in code external to the fake repository.
</summary>
</member>
<member name="T:Fake.Core.NunitDataVersion">
<summary>
 The NUnit versions supported
 Please consider not using a match on this type in code external to the fake repository.
</summary>
</member>
<member name="T:Fake.Core.DotNetCoverageTool">
<summary>
 The list of DotNet coverage tools supported
 Please consider not using a match on this type in code external to the fake repository.
</summary>
</member>
<member name="T:Fake.Core.KnownTags">
<summary>
 The supported tracing tags
 Please consider not using a match on this type in code external to the fake repository.
</summary>
</member>
<member name="M:Fake.Core.CoreTracing.postMessage(Fake.Core.TraceData)">
<summary>
 Allows to post messages to all trace listeners
</summary>
</member>
<member name="P:Fake.Core.CoreTracing.traceListenersVar">
<summary>
 A List with all registered listeners
</summary>
</member>
<member name="P:Fake.Core.CoreTracing.defaultConsoleTraceListener">
<summary>
 The default TraceListener for Console.
</summary>
</member>
<member name="T:Fake.Core.TraceSecrets">
<summary>
 Module to handle tracing secret values in logs
</summary>
</member>
<member name="M:Fake.Core.ConsoleWriter.colorMap(Fake.Core.TraceData)">
<summary>
 A default color map which maps TracePriorities to ConsoleColors
</summary>
</member>
<member name="T:Fake.Core.TestStatusModule">
<summary>
 Testing status
</summary>
</member>
<member name="T:Fake.Core.Trace.ISafeDisposable">
 <summary>
 A safe disposable type for tracing
 </summary>
</member>
<member name="T:Fake.Core.Trace.FAKEException">
 <summary>
 Define a FAKE exception type
 </summary>
</member>
<member name="M:Fake.Core.Trace.logItems(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>
 Logs the given files with the message.
 </summary>

 <param name="message">The message to log</param>
 <param name="items">The files to log message to</param>
</member>
<member name="M:Fake.Core.Trace.logToConsole(System.String,Fake.Core.Trace.EventLogEntryType)">
 <summary>
 Traces the message to the console
 </summary>

 <param name="msg">The message to log</param>
 <param name="eventLogEntry">The message log level</param>
</member>
<member name="M:Fake.Core.Trace.useWith``1(System.Boolean,Microsoft.FSharp.Core.FSharpFunc{Fake.Core.Trace.ISafeDisposable,``0},Fake.Core.Trace.ISafeDisposable)">
 <summary>
 Allows automatic or manual tracing around a function being run
 If in automatic success mode and no exception is thrown then trace is marked as success
 Any exception thrown will result in a mark failed and exception re-thrown
 </summary>

 <param name="automaticSuccess">Flag to mark trace task as success</param>
 <param name="func">Callback to call on result of task trace</param>
 <param name="trace">The trace instance</param>
</member>
<member name="M:Fake.Core.Trace.traceTask(System.String,System.String)">
 <summary>
 Wrap functions in a 'use' of this function
 </summary>

 <param name="name">The name of the task</param>
 <param name="description">The description of the task</param>
</member>
<member name="M:Fake.Core.Trace.traceEndTaskUnsafe(System.String)">
 <summary>
 Traces the end of a task
 </summary>

 <param name="task">The name of the task</param>
</member>
<member name="M:Fake.Core.Trace.traceEndTaskUnsafeEx(Fake.Core.TagStatus,System.String)">
 <summary>
 Traces the end of a task
 </summary>

 <param name="state">The state of the task</param>
 <param name="task">The name of the task</param>
</member>
<member name="M:Fake.Core.Trace.traceStartTaskUnsafe(System.String,System.String)">
 <summary>
 Traces the begin of a task
 </summary>

 <param name="task">The name of the task</param>
 <param name="description">The description of the task</param>
</member>
<member name="M:Fake.Core.Trace.traceFailureTarget(System.String,System.String,System.String)">
 <summary>
 Traces a failed target
 </summary>

 <param name="name">The name of the target</param>
 <param name="description">The description of the target</param>
 <param name="dependencyString">The target dependency string</param>
</member>
<member name="M:Fake.Core.Trace.traceFinalTarget(System.String,System.String,System.String)">
 <summary>
 Traces a final target
 </summary>

 <param name="name">The name of the target</param>
 <param name="description">The description of the target</param>
 <param name="dependencyString">The target dependency string</param>
</member>
<member name="M:Fake.Core.Trace.traceTarget(System.String,System.String,System.String)">
 <summary>
 Traces a target
 </summary>

 <param name="name">The name of the target</param>
 <param name="description">The description of the target</param>
 <param name="dependencyString">The target dependency string</param>
</member>
<member name="M:Fake.Core.Trace.traceEndTargetUnsafe(System.String)">
 <summary>
 Traces the end of a target
 </summary>

 <param name="name">The name of the target</param>
</member>
<member name="M:Fake.Core.Trace.traceEndFailureTargetUnsafeEx(Fake.Core.TagStatus,System.String)">
 <summary>
 Traces the end of a failure target
 </summary>

 <param name="state">The target state</param>
 <param name="name">The name of the target</param>
</member>
<member name="M:Fake.Core.Trace.traceEndFinalTargetUnsafeEx(Fake.Core.TagStatus,System.String)">
 <summary>
 Traces the end of a final target
 </summary>

 <param name="state">The target state</param>
 <param name="name">The name of the target</param>
</member>
<member name="M:Fake.Core.Trace.traceEndTargetUnsafeEx(Fake.Core.TagStatus,System.String)">
 <summary>
 Traces the end of a target
 </summary>

 <param name="state">The target state</param>
 <param name="name">The name of the target</param>
</member>
<member name="M:Fake.Core.Trace.traceStartFailureTargetUnsafe(System.String,System.String,System.String)">
 <summary>
 Traces the begin of a failure target
 </summary>

 <param name="name">The name of the target</param>
 <param name="description">The description of the target</param>
 <param name="dependencyString">The target dependency string</param>
</member>
<member name="M:Fake.Core.Trace.traceStartFinalTargetUnsafe(System.String,System.String,System.String)">
 <summary>
 Traces the begin of a final target
 </summary>

 <param name="name">The name of the target</param>
 <param name="description">The description of the target</param>
 <param name="dependencyString">The target dependency string</param>
</member>
<member name="M:Fake.Core.Trace.traceStartTargetUnsafe(System.String,System.String,System.String)">
 <summary>
 Traces the begin of a target
 </summary>

 <param name="name">The name of the target</param>
 <param name="description">The description of the target</param>
 <param name="dependencyString">The target dependency string</param>
</member>
<member name="M:Fake.Core.Trace.closeAllOpenTags">
 <summary>
 Closes all opened tags
 </summary>
</member>
<member name="M:Fake.Core.Trace.setBuildNumber(System.String)">
 <summary>
 Trace the given build number
 </summary>

 <param name="number">The build number to trace</param>
</member>
<member name="M:Fake.Core.Trace.publish(Fake.Core.ImportData,System.String)">
 <summary>
 Publish given type in given path
 </summary>

 <param name="typ">The type to publish</param>
 <param name="path">The path to publish type to</param>
</member>
<member name="M:Fake.Core.Trace.testOutput(System.String,System.String,System.String)">
 <summary>
 Trace test output and errors
 </summary>

 <param name="testName">The test name</param>
 <param name="out">The test output</param>
 <param name="err">The test error</param>
</member>
<member name="M:Fake.Core.Trace.testStatus(System.String,Fake.Core.TestStatus)">
 <summary>
 Set status for the given test
 </summary>

 <param name="testName">The test name</param>
 <param name="testStatus">The test status</param>
</member>
<member name="M:Fake.Core.Trace.setBuildState(Fake.Core.TagStatus)">
 <summary>
 Set build state with the given tag
 </summary>

 <param name="tag">The tag to trace</param>
</member>
<member name="M:Fake.Core.Trace.setBuildStateWithMessage(Fake.Core.TagStatus,System.String)">
 <summary>
 Set build state with the given tag and message
 </summary>

 <param name="tag">The tag to trace</param>
 <param name="message">the build message</param>
</member>
<member name="M:Fake.Core.Trace.traceTag(Fake.Core.KnownTags,System.String)">
 <summary>
 Traces a tag
 </summary>

 <param name="tag">The tag to trace</param>
 <param name="description">the tag description</param>
</member>
<member name="M:Fake.Core.Trace.closeTagUnsafe(Fake.Core.KnownTags)">
 <summary>
 Removes an opening tag from the internal tag stack
 </summary>

 <param name="tag">The tag to insert</param>
</member>
<member name="M:Fake.Core.Trace.closeTagUnsafeEx(Fake.Core.TagStatus,Fake.Core.KnownTags)">
 <summary>
 Removes an opening tag from the internal tag stack
 </summary>

 <param name="tag">The tag to close</param>
</member>
<member name="M:Fake.Core.Trace.openTagUnsafe(Fake.Core.KnownTags,System.String)">
 <summary>
 Puts an opening tag on the internal tag stack
 </summary>

 <param name="tag">The tag to insert</param>
 <param name="description">The tag description</param>
</member>
<member name="M:Fake.Core.Trace.traceHeader(System.String)">
 <summary>
 Traces a header
 </summary>

 <param name="name">The header value</param>
</member>
<member name="M:Fake.Core.Trace.traceLine">
 <summary>
 Traces a line
 </summary>
</member>
<member name="M:Fake.Core.Trace.traceEnvironmentVariables">
 <summary>
 Traces the EnvironmentVariables
 </summary>
</member>
<member name="M:Fake.Core.Trace.traceException(System.Exception)">
 <summary>
 Traces an exception details (in red)
 </summary>

 <param name="ex">The exception to trace</param>
</member>
<member name="M:Fake.Core.Trace.exceptionAndInnersToString(System.Exception)">
 <summary>
 Converts an exception and its inner exceptions to a nice string.
 </summary>

 <param name="ex">The exception to convert</param>
</member>
<member name="M:Fake.Core.Trace.traceErrorfn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
 <summary>
 Writes an error message to stderr (in red)
 </summary>

 <param name="fmt">The formatted error message to trace</param>
</member>
<member name="M:Fake.Core.Trace.traceError(System.String)">
 <summary>
 Traces an error (in red)
 </summary>

 <param name="error">The error message to trace</param>
</member>
<member name="M:Fake.Core.Trace.traceFAKE``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
 <summary>
 Writes a trace to the command line (in yellow)
 </summary>

 <param name="fmt">The formatted message to trace</param>
</member>
<member name="M:Fake.Core.Trace.traceImportantfn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
 <summary>
 Writes a message to stderr (in yellow)
 </summary>

 <param name="fmt">The formatted message to trace</param>
</member>
<member name="M:Fake.Core.Trace.traceImportant(System.String)">
 <summary>
 Writes a trace to stderr (in yellow)
 </summary>

 <param name="text">The text to trace</param>
</member>
<member name="M:Fake.Core.Trace.traceVerbose(System.String)">
 <summary>
 Writes a trace to the command line (in green) if the verbose mode is activated.
 </summary>

 <param name="s">The message to trace</param>
</member>
<member name="M:Fake.Core.Trace.tracef``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
 <summary>
 Writes a message to the command line (in green) and without a line break
 </summary>

 <param name="fmt">The formatted message to log</param>
</member>
<member name="M:Fake.Core.Trace.tracefn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
 <summary>
 Writes a message to the command line (in green)
 </summary>

 <param name="fmt">The formatted message to log</param>
</member>
<member name="M:Fake.Core.Trace.trace(System.String)">
 <summary>
 Writes a trace to the command line (in green)
 </summary>

 <param name="message">The message to log</param>
</member>
<member name="M:Fake.Core.Trace.logVerbosefn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
 <summary>
 Logs the specified string if the verbose mode is activated.
 </summary>

 <param name="fmt">The formatted message to log</param>
</member>
<member name="M:Fake.Core.Trace.logf``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
 <summary>
 Logs the specified message (without line break)
 </summary>

 <param name="fmt">The formatted message to log</param>
</member>
<member name="M:Fake.Core.Trace.logfn``1(Microsoft.FSharp.Core.PrintfFormat{``0,Microsoft.FSharp.Core.Unit,System.String,Microsoft.FSharp.Core.Unit})">
 <summary>
 Logs the specified message
 </summary>

 <param name="fmt">The formatted message to log</param>
</member>
<member name="M:Fake.Core.Trace.isVerbose(System.Boolean)">
 <summary>
 Checks if FAKE is running in verbose mode
 </summary>

 <param name="printHint">Flag to mark if a hint will be written to log for verbosity</param>
</member>
<member name="M:Fake.Core.Trace.log(System.String)">
 <summary>
 Logs the specified string
 </summary>

 <param name="message">The message to log</param>
</member>
<member name="T:Fake.Core.Trace">
 <summary>
 This module contains function which allow to trace build output
 </summary>
</member>
</members>
</doc>
