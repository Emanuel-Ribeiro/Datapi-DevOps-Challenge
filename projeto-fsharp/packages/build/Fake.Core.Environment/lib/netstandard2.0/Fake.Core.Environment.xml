<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Fake.Core.Environment</name></assembly>
<members>
<member name="T:Fake.Core.TraceMode">
<summary>
 The trace mode option.
</summary>
</member>
<member name="T:Fake.Core.BuildServer">
<summary>
 The server type option.
</summary>
</member>
<member name="T:Fake.Core.Environment.EnvironTarget">
 <summary>
 Type alias for System.EnvironmentVariableTarget
 </summary>
</member>
<member name="M:Fake.Core.Environment.getNuGetPackagesCacheFolder">
<summary>
 Returns the path to the user-specific nuget packages folder
</summary>
</member>
<member name="M:Fake.Core.Environment.getDefaultEncoding">
 <summary>
 Contains the IO encoding which is given via build parameter "encoding" or the default encoding if no encoding
 was specified.
 </summary>
</member>
<member name="M:Fake.Core.Environment.getTargetPlatformDir(System.String)">
 <summary>
 Gets the local directory for the given target platform
 </summary>
</member>
<member name="M:Fake.Core.Environment.getNewestTool``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
 Helper function to help find framework or sdk tools from the
 newest toolkit available
 </summary>
</member>
<member name="P:Fake.Core.Environment.sdkBasePath">
 <summary>
 Base path for getting tools from windows SDKs
 </summary>
</member>
<member name="P:Fake.Core.Environment.TargetPlatformPrefix">
 <summary>
 The path of the current target platform
 </summary>
</member>
<member name="P:Fake.Core.Environment.pathDirectories">
 <summary>
 Gets the list of valid directories included in the PATH environment variable.
 </summary>
</member>
<member name="P:Fake.Core.Environment.monoVersion">
 <summary>
 Required sometimes to workaround mono crashes <a href="http://stackoverflow.com/a/8414517/1269722">
 see this link</a>
 <remarks>
 Only given when we are running on mono,
 represents the version of the mono runtime we
 are currently running on.
 In netcore world you can retrieve the mono version in the
 environment (PATH) via <c>Fake.Core.Process.Mono.monoVersion</c>
 </remarks>
 </summary>
</member>
<member name="P:Fake.Core.Environment.isMono">
 <summary>
 Determines if the current FAKE runner is being run via mono.  With the FAKE 5 or above runner,
 this will always be false
 </summary>
 Todo: Detect mono on windows
</member>
<member name="P:Fake.Core.Environment.isWindows">
 <summary>
 Determines if the current system is a Windows system
 </summary>
</member>
<member name="P:Fake.Core.Environment.isLinux">
 <summary>
 Determines if the current system is a Linux system
 </summary>
</member>
<member name="P:Fake.Core.Environment.isMacOS">
 <summary>
 Determines if the current system is a MacOs system
 </summary>
</member>
<member name="P:Fake.Core.Environment.isUnix">
 <summary>
 Determines if the current system is an Unix system.
 See <a href="http://www.mono-project.com/docs/faq/technical/#how-to-detect-the-execution-platform">
 how-to-detect-the-execution-platform
 </a>
 </summary>
</member>
<member name="P:Fake.Core.Environment.SystemRoot">
 <summary>
 The system root environment variable. Typically <c>C:\Windows</c>
 </summary>
</member>
<member name="P:Fake.Core.Environment.ProgramFilesX86">
 <summary>
 The path of Program Files (x86)
 It seems this covers all cases where <c>PROCESSOR\_ARCHITECTURE</c> may misreport and the case where
 the other variable <c>PROCESSOR\_ARCHITEW6432</c> can be null
 </summary>
</member>
<member name="P:Fake.Core.Environment.ProgramFiles">
 <summary>
 The path of the "Program Files" folder - might be x64 on x64 machine
 </summary>
</member>
<member name="M:Fake.Core.Environment.hasEnvironVar(System.String)">
 <summary>
 Returns if the build parameter with the given name was set
 </summary>

 <param name="name">The name of the environment variable</param>
</member>
<member name="M:Fake.Core.Environment.splitEnvironVar(System.String)">
 <summary>
 Splits the entries of an environment variable and removes the empty ones.
 </summary>

 <param name="name">The name of the environment variable</param>
</member>
<member name="M:Fake.Core.Environment.environVarOrNone(System.String)">
 <summary>
 Retrieves the environment variable or None
 </summary>

 <param name="name">The name of the environment variable</param>
</member>
<member name="M:Fake.Core.Environment.environVarAsBool(System.String)">
 <summary>
 Retrieves the environment variable with the given name or returns the false if no value was set
 </summary>

 <param name="varName">The name of the environment variable</param>
</member>
<member name="M:Fake.Core.Environment.environVarAsBoolOrDefault(System.String,System.Boolean)">
 <summary>
 Retrieves the environment variable with the given name or returns the default bool if no value was set
 </summary>

 <param name="name">The name of the environment variable</param>
 <param name="defaultValue">The default value to return if no value was set</param>
</member>
<member name="M:Fake.Core.Environment.environVarOrFail(System.String)">
 <summary>
 Retrieves the environment variable with the given name or fails if not found
 </summary>

 <param name="name">The name of the environment variable</param>
</member>
<member name="M:Fake.Core.Environment.environVarOrDefault(System.String,System.String)">
 <summary>
 Retrieves the environment variable with the given name or returns the default if no value was set
 </summary>

 <param name="name">The name of the environment variable</param>
 <param name="defaultValue">The default value to return if no value was set</param>
</member>
<member name="M:Fake.Core.Environment.clearEnvironVar(System.String)">
 <summary>
 Clears the environment variable with the given name for the current process.
 </summary>

 <param name="name">The name of the environment variable</param>
</member>
<member name="M:Fake.Core.Environment.setEnvironVar(System.String,System.String)">
 <summary>
 Sets the environment variable with the given name
 </summary>

 <param name="name">The name of the environment variable to set</param>
 <param name="value">The value of the environment variable to set</param>
</member>
<member name="M:Fake.Core.Environment.environVars">
 <summary>
 Retrieves all environment variables from the given target
 </summary>
</member>
<member name="M:Fake.Core.Environment.environVar(System.String)">
 <summary>
 Retrieves the environment variable with the given name
 </summary>

 <param name="name">The environment variable name</param>
</member>
<member name="M:Fake.Core.Environment.Internal.parseMonoDisplayName(System.String)">
<summary>
 Internal, do not use.
 We use this internally for parsing the output of mono --version
</summary>
</member>
<member name="T:Fake.Core.Environment">
 <summary>
 This module contains functions which allow to read and write environment variables and build parameters
 </summary>
</member>
<member name="M:Fake.Core.BuildServerModule.install(Microsoft.FSharp.Collections.FSharpList{Fake.Core.BuildServerInstaller})">
 <summary>
 Install given list of build servers
 </summary>

 <param name="servers">The list of build servers to install</param>
</member>
<member name="P:Fake.Core.BuildServerModule.isLocalBuild">
 <summary>
 Is true when the current build is a local build.
 </summary>
</member>
<member name="P:Fake.Core.BuildServerModule.buildVersion">
 <summary>
 The current build version as detected from the current build server.
 </summary>
</member>
<member name="P:Fake.Core.BuildServerModule.buildServer">
 <summary>
 The current build server
 </summary>
</member>
<member name="P:Fake.Core.BuildServerModule.appVeyorBuildVersion">
 <summary>
 AppVeyor build number
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.ccBuildLabel">
 <summary>
 CruiseControl.NET Build label
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.jenkinsBuildNumber">
 <summary>
 Build number retrieved from Jenkins
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.gitHubActionsBuildNumber">
 <summary>
 Build number retrieved from GitHub Actions
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.isGitHubActionsBuild">
<summary>
 Checks if we are on GitHub Actions
 &lt;/summary&gt;
 [omit]
</summary>
</member>
<member name="P:Fake.Core.BuildServerModule.gitlabCIBuildNumber">
 <summary>
 Build number retrieved from GitLab CI
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.isGitlabCI">
 <summary>
 Checks if we are on GitLab CI
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.travisBuildNumber">
 <summary>
 Build number retrieved from Travis
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.tcBuildNumber">
 <summary>
 Build number retrieved from TeamCity
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.tfBuildNumber">
 <summary>
 Build number retrieved from Team Foundation
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.isTFBuild">
 <summary>
 Checks if we are on Team Foundation
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.isBambooBuild">
 <summary>
 Checks if we are on Bamboo
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.bambooBuildNumber">
 <summary>
 Build number retrieved from Bamboo
 </summary>
 [omit]
</member>
<member name="P:Fake.Core.BuildServerModule.xmlOutputFile">
 <summary>
 Defines the XML output file - used for build servers like CruiseControl.NET.
 This output file can be specified by using the *logfile* build parameter.
 </summary>
</member>
<member name="P:Fake.Core.BuildServerModule.localBuildLabel">
 <summary>
 A constant label for local builds
 </summary>
 [omit]
</member>
<member name="T:Fake.Core.BuildServerModule">
 <summary>
 Contains functions which allow build scripts to interact with a build server.
 </summary>
</member>
<member name="M:Fake.Core.Operators.op_GreaterBangGreater``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0)">
 <summary>
 Apply given parameter to two callbacks and return results from both callbacks
 </summary>
</member>
</members>
</doc>
